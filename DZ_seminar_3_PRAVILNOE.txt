*************************************************************************
ЗАДАЧА 1 

*************************************************************************
Сортировка слиянием
Инструкция по использованию платформы

Внутри класса MergeSort напишите метод mergeSort, который принимает массив целых чисел a и реализует алгоритм сортировки слиянием. Метод должен возвращать отсортированный массив.
------------------------------------------------------------------------
Пример

a = {5, 1, 6, 2, 3, 4} -> [1, 2, 3, 4, 5, 6]

------------------------------------------------------------------------
РЕШЕНИЕ
  ВНИМАНИЕ !!!!!! ВСЕ СТЕРЕТЬ ИХНЕЕ, И ВСТАВИТЬ ВЕСЬ ЭТОТКУСОК РЕШЕНИЯ !!!
------------------------------------------------------------------------


import java.util.Arrays;

class MergeSort { 
	public static int[] mergeSort(int[] a) { 

int n = a.length;
 if (n < 2) { return a; } int mid = n / 2;
 int[] l = new int[mid];
 int[] r = new int[n - mid];

    for (int i = 0; i < mid; i++) {
        l[i] = a[i];
    }
    for (int i = mid; i < n; i++) {
        r[i - mid] = a[i];
    }
    l = mergeSort(l);
    r = mergeSort(r);

    return merge(l, r);
}

public static int[] merge(int[] l, int[] r) {

    int left = l.length;
    int right = r.length;
    int[] a = new int[left + right];
    int i = 0, j = 0, k = 0;

    while (i < left && j < right) {
        if (l[i] <= r[j]) {
            a[k++] = l[i++];
        }
        else {
            a[k++] = r[j++];
        }
    }
    while (i < left) {
        a[k++] = l[i++];
    }
    while (j < right) {
        a[k++] = r[j++];
    }

    return a;
}
}

public class Printer{
 public static void main(String[] args) {
 int[] a;

    if (args.length == 0) {
        a = new int[]{5, 1, 6, 2, 3, 4};
    } else {
        a = Arrays.stream(args[0].split(", ")).mapToInt(Integer::parseInt).toArray();
    }

    MergeSort answer = new MergeSort();
    String itresume_res = Arrays.toString(answer.mergeSort(a));
    System.out.println(itresume_res);
}
}



*************************************************************************
ЗАДАЧА 2 - решение верное АВТОПРОВЕРКА ПРИНЯЛА !!!

*************************************************************************
Удаление четных элементов
Инструкция по использованию платформы

Напишите функцию removeEvenNumbers, которая принимала бы произвольный список целых чисел, удаляла бы из него четные числа и выводила список без четных чисел.

Напишите свой код в методе removeEvenNumbers класса Answer. Метод removeEvenNumbers принимает на вход один параметр:

Integer[] arr - список целых чисел
------------------------------------------------------------------------
Пример

arr = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
removeEvenNumbers(arr);

// [1, 3, 5, 7, 9]

arr = new Integer[]{2, 4, 6, 8};
removeEvenNumbers(arr);

// []

------------------------------------------------------------------------
РЕШЕНИЕ
------------------------------------------------------------------------

import java.util.Arrays;
import java.util.ArrayList;

class Answer {
    public static void removeEvenNumbers(Integer[] arr) {
      // Введите свое решение ниже

ArrayList<Integer> a = new ArrayList<>(Arrays.asList(arr));
    a.removeIf(n -> (n % 2 == 0));
    System.out.println(a);
       
    }
}

// Не удаляйте этот класс - он нужен для вывода результатов на экран и проверки
public class Printer{ 
    public static void main(String[] args) { 
      Integer[] arr = {};
      
      if (args.length == 0) {
        // При отправке кода на Выполнение, вы можете варьировать эти параметры
        arr = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9};
      }
      else{
        arr = Arrays.stream(args[0].split(", "))
                        .map(Integer::parseInt)
                        .toArray(Integer[]::new);
      }     
      
      Answer ans = new Answer();      
      ans.removeEvenNumbers(arr);
    }
}


*************************************************************************
ЗАДАЧА 3 - решение верное АВТОПРОВЕРКА ПРИНЯЛА !!!

Внимание !!! 

При нажатии выполнить автопроверка идёт всреднем 7.8 сек и выдаёт правельный результат
При нажатии ПРОВЕРИТЬ у меня первый раз код работал больше 30 сек со второго раза приняла .
Возможно это связоно с загруской сервера автопроверки.
*************************************************************************

Анализатор списка
Инструкция по использованию платформы
------------------------------------------------------------------------
Напишите функцию analyzeNumbers, которая принимает на вход целочисленный список arr и:

Сортирует его по возрастанию и выводит на экран
Находит минимальное значение в списке и выводит на экран - Minimum is {число}
Находит максимальное значение в списке и выводит на экран - Maximum is {число}
Находит среднее арифметическое значений списка и выводит на экран - Average is =  {число}
Напишите свой код в методе analyzeNumbers класса Answer. Метод analyzeNumbers принимает на вход один параметр:

Integer[] arr - список целых чисел
------------------------------------------------------------------------
Пример

arr = new Integer[]{4, 2, 7, 5, 1, 3, 8, 6, 9};
analyzeNumbers(arr)

// [1, 2, 3, 4, 5, 6, 7, 8, 9]
// Minimum is 1
// Maximum is 9
// Average is = 5

------------------------------------------------------------------------
РЕШЕНИЕ
------------------------------------------------------------------------

import java.util.Arrays;
import java.util.ArrayList;

class Answer { public static void analyzeNumbers(Integer[] arr) {

    Arrays.sort(arr);
    System.out.println(Arrays.toString(arr));
    System.out.println("Minimum is " + Arrays.stream(arr).min(Integer::compareTo).get());
    System.out.println("Maximum is " + Arrays.stream(arr).max(Integer::compareTo).get());
    System.out.println("Average is = " + (int) (Arrays.stream(arr).mapToInt(value -> value).sum() / Arrays.stream(arr).count()));

}
}

class Printer{ public static void main(String[] args) { Integer[] arr = {};

    if (args.length == 0) {
        arr = new Integer[]{4, 2, 7, 5, 1, 3, 8, 6, 9};
    }
    else{
        arr = Arrays.stream(args[0].split(", "))
                .map(Integer::parseInt)
                .toArray(Integer[]::new);
    }

    Answer ans = new Answer();
    ans.analyzeNumbers(arr);
}
}